input {
    file {
        path => "C:/elastic_stack/practicing/json_auditing/v2/v2.2/at_v2.2.log"
        start_position => "beginning"
        sincedb_path => "NULL_final"
    }
}
filter {
    # First mapping
    dissect {
        mapping => {
            "message" => "%{timestamp} | %{level} | %{request} | %{action} | %{message}"
        }
    }
    # Action mapping
    grok{
        match =>{
             "action" => "(?<base_action>(/[a-zA-Z]+)+)(?<u_id>(/.*){0,1}$)"
            #"action" => "(?<base_action>(/[a-zA-Z]+)+)(?<u_id>(//.*[0-9]*.*){0,1})"
        }
    }
    # Begin process base action
    mutate {
         split => { "base_action" => "/" }
    }
    mutate {
        remove_field => ["[base_action][0]"]
    }
    mutate {
       join => { "base_action" => "_" }
    }
    # End process base action
    # Remove leading / from u_id
    mutate{
        gsub => [ "u_id", "^/", "" ]
    }
    # If uid is null, it is removed
    if [u_id] == ""{
        mutate{
            remove_field => ["u_id"]
        }
    }
    # Process date
    date {
        match => ["timestamp", "ISO8601", "YYYY-MM-dd HH:mm:ss,SSS"]
    }
    # Preparing the json payload
    mutate {
        copy => {
            "message" => "message_copy"
        }
    }
    grok {
        match => {
            "message_copy" => ["%{JSON:payload_raw}"]
        }
        pattern_definitions => {
            "JSON" => "{.*$"
        }
        tag_on_failure => ["From Json Parsing"]
    }
     json {
        source => "payload_raw"
        target => "payload"
    }
    mutate {
        remove_field => ["payload_raw", "message_copy","message"]
    }
    # end of preparing json payload

    # processing userToken (if found) using base64 decryption
    if ("" in [payload][userToken])  {
        mutate {
            copy => {
                "[payload][userToken]" => "UserTokenFull"
            }
        }
        dissect {
            mapping => {
                "UserTokenFull" => "%{UserTokenHead}.%{UserTokenBody}.%{UserTokenSignature}"
            }
        }
        ruby { 
            code => 'event.set("decoded", Base64.decode64(event.get("UserTokenBody")))' 
        }
        grok {
            match => {
                "decoded" => ["%{JSON:decodedAfterFilteration}"]
            }
            pattern_definitions => {
                "JSON" => "{.*$"
            }
            tag_on_failure => ["From Json Parsing"]
        }
        json {
            source => "decodedAfterFilteration"
            target => "decodedAsJson"
        }
        mutate{
            copy => {
                "[decodedAsJson][sub]"=>"User_Sub"
            }
        }
        mutate {
            remove_field => ["UserTokenHead","UserTokenBody","UserTokenSignature","decodedAsJson", "UserTokenFull","decodedAfterFilteration","decoded","[payload][userToken]"]
        }
    }

    # processing login action
    if [action] == "login"{
        grok {
            match => {
                "action" => [
                    "login"
                ]
            }
            add_field => {
                "[payload][UserToken]" => "awoidhaowidhowaidoiawdhoaiwdhoiawdhoawdhoh"
            }
            remove_field => [
                "[payload][password]"
            ]
            add_tag => [ "login" ]
            tag_on_failure => ["From login"]
        }
    }
    # processing orderfatura action
    if "login" not in [tags]{
        grok {
            match => {
                "action" => [
                    "orderfatura"
                ]
            }
            add_field => {
                "[payload][client]" => "Fatura app"
            }
            add_tag => [ "Order Fatura" ]
            tag_on_failure => ["From order fatura"]
        }
    }

}
output {
    file{
        path =>"C:/elastic_stack/practicing/json_auditing/v2/v2.2/output_final.txt"
    }
    elasticsearch {
        hosts => "http://localhost:9200"
        index => "at_v2.2_final"
    }
    stdout{
    }
}