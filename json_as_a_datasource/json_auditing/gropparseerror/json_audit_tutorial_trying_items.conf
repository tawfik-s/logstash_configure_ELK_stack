input {
    file {
        path => "C:/elastic_stack/practicing/json_auditing/gropparseerror/json_audit_tutorial_trying_items.log"
        start_position => "beginning"
        sincedb_path => "NULL2"
    }
}
filter {
     dissect {
        mapping => {
            "message" => "%{timestamp} | %{level} | %{request} | %{action} | %{message}"
        }
    }
    date {
        match => ["timestamp", "ISO8601", "YYYY-MM-dd HH:mm:ss,SSS"]
    }
    mutate {
        copy => {
            "message" => "message_copy"
        }
    }
    grok {
        match => {
            "message_copy" => ["%{JSON:payload_raw}"]
        }
        pattern_definitions => {
            "JSON" => "{.*$"
        }
        tag_on_failure => ["From Json Parsing"]
    }
     json {
        source => "payload_raw"
        target => "payload"
    }

    mutate {
        remove_field => ["payload_raw", "message_copy","message"]
    }
    if [action] == "login"{
        grok {
            match => {
                "action" => [
                    "login"
                ]
            }
            add_field => {
                "[payload][UserToken]" => "awoidhaowidhowaidoiawdhoaiwdhoiawdhoawdhoh"
            }
            remove_field => [
                "[payload][password]"
            ]
            add_tag => [ "login" ]
            tag_on_failure => ["From login"]
        }
    }
    if "login" not in [tags]{
        grok {
            match => {
                "action" => [
                    "orderfatura"
                ]
            }
            add_field => {
                "[payload][client]" => "Fatura app"
            }
            add_tag => [ "Order Fatura" ]
            tag_on_failure => ["From order fatura"]
        }
    }

}
output {
    file{
        path =>"C:/elastic_stack/practicing/json_auditing/gropparseerror/output2.txt"
    }
    elasticsearch {
        hosts => "http://localhost:9200"
        index => "json_audit_tutorial_trial_working_with_items"
    }
    stdout{
    }
}